import joblib
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# Conexão com o banco de dados PostgreSQL
DATABASE_URI = 'postgresql+psycopg2://postgres:senha@localhost/dataset'  # Substitua com as credenciais corretas
engine = create_engine(DATABASE_URI)
Session = sessionmaker(bind=engine)

# Função para carregar os dados do PostgreSQL
def carregar_dados():
    session = Session()
    query = """
    SELECT quilometragem, vf_modelyear AS ano, brandname AS marca, askprice AS preco
    FROM cars
    WHERE askprice IS NOT NULL
    """
    dados = pd.read_sql(query, session.bind)
    session.close()
    return dados

# Carregar os dados
data = carregar_dados()

# Pré-processamento e seleção de variáveis
X = data[['quilometragem', 'ano', 'marca']]  # Colunas relevantes
y = data['preco']

# Codificar a coluna 'marca' (se for categórica) para o modelo
X = pd.get_dummies(X, columns=['marca'], drop_first=True)

# Dividir em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Treinar o modelo
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

# Avaliação do modelo
predictions = model.predict(X_test)
rmse = mean_squared_error(y_test, predictions, squared=False)
print(f"RMSE: {rmse}")

# Salvar o modelo
joblib.dump(model, 'modelo_previsao_veiculos.joblib')
print("Modelo salvo com sucesso!")
